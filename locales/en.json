{
  "hello": "Hello",
  "welcome": "Welcome",
  "goodbye": "Goodbye",
  "confirmExecute": "Confirm execution?",
  "yesNo": "(y/n)",
  "pleaseAnswerYesNo": "Please answer 'y' or 'n'.",
  "executionCancelled": "Execution cancelled.",
  "shuttingDown": "👋 Shutting down agent...",
  "finalSaveCompleted": "💾 Final save completed.",
  "finalSaveError": "❌ Error during final save:",
  "agentFinished": "Agent finished.",
  "removedLastToolCallRequest": "Removed last assistant message requesting tool calls from history.",
  "aiRequestsTool": "🤖 AI requests tool execution...",
  "unknownFunctionRequested": "Error: Unknown function requested by AI: {functionName}",
  "errorFunctionNotImplemented": "Error: Function '{functionName}' not implemented locally.",
  "aiResponseNoContent": "AI response without text content or tool call.",
  "errorApiKeyNotConfigured": "ERROR: OpenAI API Key not configured!",
  "errorApiKeyInstructions": "Edit the OPENAI_API_KEY variable in the src/config.js file.",
  "warningAxiosMissing": "Warning: 'axios' module required for web search (npm install axios).",
  "agentStarted": "--- Agent {modelName} Started ---",
  "mainScript": "Main script: {scriptFilename}",
  "promptInstruction": "Enter your instruction or 'quit' to exit.",
  "promptUser": "\nYou (Enter for '{defaultInstruction}', or 'quit'): ",
  "defaultInstruction": "Let's get to work.",
  "discoverSystem": "Discover the system you are running on.",
  "proactiveDiscoverSystem": "Proactively discover the system you are running on by proposing and executing relevant commands.",
  "sigintDetected": "\n👋 CTRL+C detected. Saving state before exiting...",
  "saveCompleted": "💾 Save completed.",
  "saveError": "❌ Error during save:",
  "exiting": "Exiting now.",
  "memorySummaryTitle": "--- Internal Memory Summary ---",
  "memorySysInfo": "Sys Info:",
  "memoryNotes": "Notes:",
  "memoryActionLog": "Action Log ({count}/{total}):",
  "memoryActionLogEntry": "- {time}: [{statusColor}{actionType}/{status}{resetColor}] `{detail}`{errorInfo}",
  "memoryEndOfSummary": "--- End Summary ---",
  "memoryReminder": "Reminder of current state and recent actions:",
  "callingApi": "Calling OpenAI API...",
  "apiResponseReceived": "API response received.",
  "apiError": "OpenAI API Error.",
  "toolExecuting": "Executing tool: {functionName}",
  "toolExecuted": "Tool {toolName} executed.",
  "toolExecutionError": "Error executing tool {toolName}.",
  "toolResponseTruncated": "↪ Tool response truncated ({length} > {maxLength})",
  "exitRequestedAfterAction": "Exit requested after action (script update?).",
  "errorArgsParsing": "Error parsing JSON arguments for {functionName}: {error}",
  "errorArgsInvalidJson": "Error: Invalid arguments provided by AI (not JSON). Error: {message}",
  "errorToolExecution": "Error during local tool execution: {message}",
  "errorMainLoop": "\nUNEXPECTED MAIN LOOP ERROR:",
  "errorApiGeneric": "\nOpenAI API Error ({status}): {message}",
  "errorApi401": "ERROR 401: Check your OpenAI API key (OPENAI_API_KEY). Exiting.",
  "errorApi429": "ERROR 429: API rate limit reached. Suggested wait before retrying.",
  "errorInternalJsonParse": "\nInternal Error (JSON Parse Arguments?): {message}",
  "errorOccurredRetrying": "\nAn error occurred. Attempting automatic retry...",
  "errorRetryNoInstruction": "Could not find last user instruction for retry. Using default instruction.",
  "errorRetryHistoryCleaned": "History restored and cleaned before last instruction for retry.",
  "errorRetryCleanupAssistant": "Cleanup: Removing last assistant message with unresolved tool_calls before retry.",
  "errorRetryResetHistory": "Cleanup: Resetting history (except system) as no user message found for retry.",
  "aiAgentName": "🤖 {modelName}:",
  "errorNoApiResponse": "Error: No API response received.",
  "errorNoResponse": "Error: No response content found.",
  "toolCallInitiated": "Tool call initiated...",
  "toolSuccess": "Tool '{functionName}' executed successfully.",
  "errorToolNotFound": "Error: Tool '{functionName}' not found.",
  "sendingToolResults": "Sending tool results back to API...",
  "receivedFinalResponse": "Received final response from API.",
  "assistantResponseHeader": "--- Assistant Response ---",
  "errorNoFinalResponse": "Error: No final response content received.",
  "errorApiCallFailed": "API call failed.",
  "errorUnknown": "An unknown error occurred.",
  "commandConfirmPrompt": "\n--- Command Confirmation ---",
  "commandConfirmProposed": "Proposed command: $ {command}",
  "commandConfirmPurpose": "Command purpose: {purpose}",
  "notSpecified": "Not specified",
  "commandStartExecution": "--- Start Execution: $ {command} ---",
  "commandSpawnError": "\nError spawning process: {message}",
  "commandTimeoutError": "\nERROR: Timeout ({timeout}s) exceeded! Process killed.",
  "commandTimeoutErrorMsg": "SCRIPT ERROR: Timeout ({timeout}s) exceeded.",
  "commandEndExecution": "\n--- End Execution (Code: {code}{signalInfo}) ---",
  "commandRawOutputTitle": "--- Raw Output Captured ---",
  "commandRawOutputEnd": "--- End Raw Output --- ",
  "commandOutputStdout": "STDOUT:",
  "commandOutputStderr": "STDERR:",
  "commandOutputNoOutputCode": "(no output captured, code: {code}{signalInfo})",
  "commandOutputNoOutputSuccess": "(no output captured, success)",
  "readFileAttempt": "Attempting direct read: {path}",
  "readFileNotFile": "Path is not a file.",
  "readFileTooLarge": "File too large ({size} > {maxSize} bytes). Use shell commands (head, tail, grep) instead.",
  "readFileBinary": "File appears to be binary. Cannot read content directly.",
  "readFileEncodingError": "Could not decode with common encodings (utf-8, latin1).",
  "readFileReadSuccess": "File read: {path}",
  "readFileReadSuccessEncoding": "Read with {encoding} encoding.",
  "readFileError": "Error reading file {path}: {message}",
  "readFileContentHeader": "Content of '{path}':\n```\n{content}\n```",
  "webSearchAttempt": "Performing web search for: '{query}'...",
  "webSearchNoResults": "No web results found for '{query}'.",
  "webSearchResultsTitle": "Web results for '{query}':",
  "webSearchResultEntry": "{index}. {title}\n   {body}...\n   {href}",
  "webSearchError": "Web search error for '{query}': {message}",
  "webSearchHttpError": "HTTP Error {status}: {statusText}",
  "webSearchTimeoutError": "Web request timeout exceeded.",
  "listDirectoryAttempt": "Attempting to list directory: {path}",
  "listDirectoryNotDir": "Specified path is not a directory.",
  "listDirectoryEmpty": "(Directory is empty)",
  "listDirectorySuccess": "Directory listed: {path}",
  "listDirectoryError": "Error listing directory {path}: {message}",
  "listDirectoryContentHeader": "Contents of '{path}':",
  "listDirectoryEntry": "- {name}{isDir}",
  "fileWriteConfirmPrompt": "\n--- File Write Confirmation ---",
  "fileWriteConfirmProposed": "Proposed file write: {filepath}",
  "fileWriteConfirmContent": "Content snippet:\n{contentSnippet}",
  "confirmWrite": "Confirm write operation?",
  "fileWriteCancelled": "File write cancelled.",
  "fileWriteAttempt": "Attempting to write file: {filepath}",
  "fileWriteSuccess": "Successfully wrote file: {filepath}",
  "fileWriteError": "Error writing file {filepath}: {message}",
  "toolDescriptionGetMemoryKeys": "Lists the keys available under a specific path in the agent's internal memory. If no path is provided, lists keys at the root.",
  "toolDescriptionGetMemoryValue": "Retrieves the value stored at a specific path in the agent's internal memory.",
  "toolDescriptionSetMemoryValue": "Sets or updates a value at a specific path in the agent's internal memory. Creates nested paths if they don't exist.",
  "toolParamMemoryPathOptional": "The dot-separated path to inspect (e.g., 'system_info.cpu') (optional, defaults to root).",
  "toolParamMemoryPathRequired": "The dot-separated path for the value (e.g., 'system_info.cpu_model', 'notes').",
  "toolParamMemoryValue": "The value to store (can be string, number, boolean, object, or array).",
  "memoryGettingKeys": "Memory: Getting keys for path: {path}",
  "errorMemoryNotInitialized": "Error: Agent memory reference is not initialized.",
  "memoryPathNotFound": "Memory: Path not found: {path}",
  "errorMemoryPathNotObject": "Error: Path does not point to an object, cannot list keys: {path}",
  "memoryGetKeysSuccess": "Memory: Successfully retrieved keys for path: {path}",
  "memoryGetKeysError": "Memory: Error getting keys for path {path}: {message}",
  "memoryGetKeysErrorFeedback": "Error getting memory keys for {path}: {message}",
  "memoryGettingValue": "Memory: Getting value for path: {path}",
  "errorMemoryPathRequired": "Error: Memory path parameter is required.",
  "memoryGetValueSuccess": "Memory: Successfully retrieved value for path: {path}",
  "memoryGetValueError": "Memory: Error getting value for path {path}: {message}",
  "memoryGetValueErrorFeedback": "Error getting memory value for {path}: {message}",
  "memorySettingValue": "Memory: Setting value for path: {path}",
  "memorySetValueSuccess": "Memory: Successfully set value for path: {path}",
  "memorySetValueSuccessFeedback": "Successfully set memory value for path: {path}",
  "memorySetValueError": "Memory: Error setting value for path {path}: {message}",
  "memorySetValueErrorFeedback": "Error setting memory value for {path}: {message}",
  "fileNotFound": "File not found: {filePath}. Using default data.",
  "errorLoadingData": "Error loading data from {filePath}:",
  "errorSavingData": "Error saving data to {filePath}:",
  "invalidMemoryUpdate": "Invalid memory object passed to updateMemory",
  "autoContinuePrompt": "Continue.",
  "userRequestedQuit": "User requested quit via ask_user.",
  "errorToolExecutionFailed": "Tool execution failed: {message}",
  "askUserCalledLoopRestart": "ask_user was called, restarting loop with user response.",
  "assistantQuestionPrefix": "Assistant Question:",
  "promptUserResponse": "Your response: ",
  "errorToolArgsParse": "Error parsing arguments for tool {functionName}. Args: {args}. Error: {message}",
  "commandConfirmYes": "y",
  "commandConfirmNo": "n",
  "inputEndInstruction": "(Finish with Enter twice)",
  "invalidInput": "Invalid input. Please enter one of the following: {answers}",
  "invalidYesNoInput": "Invalid input. Please enter 'y' or 'n'.",
  "otherLabel": "Other...",
  "customResponsePrompt": "Your custom response: ",
  "invalidNumberInput": "Please enter a valid number.",
  "userPrompt": "Please enter your input:"
}